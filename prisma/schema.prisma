generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                @id @default(autoincrement())
  name          String?
  email         String
  password      String
  bookedFlights UserBookedFlight[]

  role UserRole @default(USER)

  accomodationFlights UserAccomodationFlight[]
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime?                @updatedAt
}

model UserAccomodationFlight {
  id Int @id @default(autoincrement())

  Flight       Flight?        @relation(fields: [flightId], references: [id])
  Accomodation Accommodation? @relation(fields: [accommodationId], references: [id])
  User         User           @relation(fields: [userId], references: [id])

  userId          Int
  flightId        Int?
  accommodationId Int?

  numberOfPeople Int?
  amount         Int?
  checkIn        DateTime?
  checkOut       DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Accommodation {
  id          Int     @id @default(autoincrement())
  name        String?
  description String?

  facilities String[]
  rating     Int?
  stars      Int?
  rooms      Int?
  surface    Int?
  price      Int?
  descriere  String?
  takenDates Json?
  photos     String[]

  location   LocationPoint @relation(fields: [locationId], references: [id])
  locationId Int           @unique

  accomodationFlights UserAccomodationFlight[]
  bookedFlights       UserBookedFlight[]
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime?                @updatedAt
}

model UserBookedFlight {
  id              Int   @id @default(autoincrement())
  userId          Int
  flightId        Int?
  accommodationId Int?
  numberOfPeople  Int
  amount          Float

  user          User           @relation(fields: [userId], references: [id])
  flight        Flight?        @relation(fields: [flightId], references: [id])
  accommodation Accommodation? @relation(fields: [accommodationId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Flight {
  id                  Int                @id @default(autoincrement())
  locationStartFlight LocationPoint      @relation("startFlightLocation", fields: [startLocationId], references: [id])
  locationEndFlight   LocationPoint      @relation("endFlightLocation", fields: [endLocationId], references: [id])
  bookedFlights       UserBookedFlight[]

  startLocationId Int @unique
  endLocationId   Int @unique

  company     String?
  companyLogo String?

  startDate DateTime
  endDate   DateTime

  twoWay         Boolean? @default(false)
  numberOfPeople Int?

  optionId Int?
  price    Int

  accomodationFlights UserAccomodationFlight[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model LocationPoint {
  id        Int     @id @default(autoincrement())
  latitude  Float
  longitude Float
  city      String?
  airport   String?

  Accommodation   Accommodation?
  startFlight     Flight?        @relation("startFlightLocation")
  endflightFlight Flight?        @relation("endFlightLocation")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime?      @updatedAt
}

enum UserRole {
  ADMIN
  USER
  ROOT
}
